
// Generated by CodiumAI

import org.junit.Test;

import java.io.*;

import static org.junit.Assert.*;

public class ASD3Test {

    // reads input file and performs operations correctly
    @Test
    public void test_read_input_file_and_perform_operations_test8() {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream content = new ByteArrayOutputStream();
        // Arrange
        try(PrintStream newOut = new PrintStream(content)) {
            System.setOut(newOut);
            String[] args = {"data\\in8.txt"};
            ASD3.main(args);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        } finally {
            System.setOut(originalOut);
        }

        String filePath = "data\\out8.txt";
        ByteArrayOutputStream expectedBaos;
        try {
            expectedBaos = readFromFile(filePath);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        // Assert
        assertEquals(expectedBaos.toString().trim(), content.toString().trim());
    }

    // reads input file and performs operations correctly
    @Test
    public void test_read_input_file_and_perform_operations_test10() {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream content = new ByteArrayOutputStream();
        // Arrange
        try(PrintStream newOut = new PrintStream(content)) {
            System.setOut(newOut);
            String[] args = {"data\\in10.txt"};
            ASD3.main(args);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        } finally {
            System.setOut(originalOut);
        }

        String filePath = "data\\out10.txt";
        ByteArrayOutputStream expectedBaos;
        try {
            expectedBaos = readFromFile(filePath);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        // Assert
        assertEquals(expectedBaos.toString().trim(), content.toString().trim());
    }

    private ByteArrayOutputStream readFromFile(String filePath) throws IOException {
        try (FileInputStream fis = new FileInputStream(filePath);
             ByteArrayOutputStream baos = new ByteArrayOutputStream()) {

            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                baos.write(buffer, 0, bytesRead);
            }

            return baos;
        }
    }

    // handles even and odd pointer numbers correctly
    @Test
    public void test_handles_even_and_odd_pointer_numbers() {
        // Arrange
        AVLTree avlTree = new AVLTree();
        avlTree.insert(0, 1);
        avlTree.insert(1, 2);
        avlTree.insert(2, 3);
        avlTree.insert(3, 4);
        avlTree.insert(4, 5);

        // Act
        int pointerIndex = 0;
        int pointerNumber = avlTree.getNumberAt(pointerIndex);

        // Assert
        assertEquals(1, pointerNumber);

        // Act
        pointerIndex = (pointerIndex + pointerNumber) % avlTree.getSize();
        pointerNumber = avlTree.getNumberAt(pointerIndex);

        // Assert
        assertEquals(2, pointerNumber);
    }

    // deletes node correctly
    @Test
    public void test_deletes_node_correctly() {
        // Arrange
        AVLTree avlTree = new AVLTree();
        avlTree.insert(0, 1);
        avlTree.insert(1, 2);
        avlTree.insert(2, 3);
        avlTree.insert(3, 4);
        avlTree.insert(4, 5);

        // Act
        avlTree.delete(2);

        // Assert
        assertEquals(4, avlTree.getSize());
        assertEquals(4, avlTree.getNumberAt(2));
        assertNull(avlTree.get(4));
    }

    // handles empty tree
    @Test
    public void test_handles_empty_tree() {
        // Arrange
        AVLTree avlTree = new AVLTree();

        // Act
        boolean isEmpty = avlTree.isEmpty();

        // Assert
        assertTrue(isEmpty);
    }

    // handles deleting last node
    @Test
    public void test_handles_deleting_last_node() {
        // Arrange
        AVLTree avlTree = new AVLTree();
        avlTree.insert(0, 1);

        // Act
        avlTree.delete(0);

        // Assert
        assertTrue(avlTree.isEmpty());
    }

    // handles deleting first node
    @Test
    public void test_handles_deleting_first_node() {
        // Arrange
        AVLTree avlTree = new AVLTree();
        avlTree.insert(0, 1);
        avlTree.insert(1, 2);
        avlTree.insert(2, 3);

        // Act
        avlTree.delete(0);

        // Assert
        assertEquals(2, avlTree.getSize());
        assertEquals(2, avlTree.getNumberAt(0));
        assertNull(avlTree.get(2));
    }

}